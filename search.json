[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Constantine",
    "section": "",
    "text": "Student Dropout\n\n\n\n\n\nAn Examination of Student Characteristics and Economic Indicators\n\n\n\n\n\n\nAug 1, 2023\n\n\nConstantine Wang\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/final.html",
    "href": "posts/final.html",
    "title": "Student Dropout",
    "section": "",
    "text": "This project aims to predict student dropout and academic success based on various student characteristics and academic indicators.\n\n\n\nThe dataset used in this project comes from Kaggle, https://www.kaggle.com/datasets/naveenkumar20bps1137/predict-students-dropout-and-academic-success?select=dataset.csv, detailing various aspects of a student’s personal background, academic performance, economic indicators, and more. To be more specific, the dataset includes variables such as marital status, nationality, parents’ qualifications and occupations, debtor status, age at enrollment, curricular units performance, among others. Additionally, it includes some economic indicators such as unemployment rate, inflation rate, and GDP, which provides a broader context to the student’s situation.\n\n\n\nAs a international student, I am deeply intrigued by how these diverse backgrounds may shape the academic outcomes of students in a broad sense. In addition to discerning any potential correlations between these student characteristics and dropout rates, I am also keen on creating a predictive model for students’ academic success.\n\n\n\n\nDoes our data confirm traditional beliefs about the features that impact on students’ academic success?\nWhat shared traits can we identify among students who tend to drop out of universities?\nDoes any overarching societal trait such as GDP and inflation rate significantly influence a student’s academic success?\nBeyond these seemingly independent factors, it’s important to consider their potential multicollinearity. Are they interrelated, affecting our analysis?\n\n\n\n\n\n# # install packages\n!pip install kaggle\n!pip install pandas\n!pip install matplotlib\n!pip install seaborn\n!pip install plotly\n\n\n\n\n\nimport zipfile\nimport pandas as pd\nfrom kaggle.api.kaggle_api_extended import KaggleApi\n\n# Initialize the API\napi = KaggleApi()\napi.authenticate()\n\n#download dataset\napi.dataset_download_files('naveenkumar20bps1137/predict-students-dropout-and-academic-success')\nwith zipfile.ZipFile('predict-students-dropout-and-academic-success.zip', 'r') as zip_ref:\n    zip_ref.extractall()\n\n#load dataset into a pandas DataFrame\ndf = pd.read_csv('dataset.csv')\n\n\n\n\nWe can see that the Target column has not been encoded yet. Then, we want to check if there is any null/missing value.\nGood news! we do not have any null value.\n\n#check if there are null/missing values\nis_null = df.isnull().sum()\nprint(is_null)\n\nMarital status                                    0\nApplication mode                                  0\nApplication order                                 0\nCourse                                            0\nDaytime/evening attendance                        0\nPrevious qualification                            0\nNacionality                                       0\nMother's qualification                            0\nFather's qualification                            0\nMother's occupation                               0\nFather's occupation                               0\nDisplaced                                         0\nEducational special needs                         0\nDebtor                                            0\nTuition fees up to date                           0\nGender                                            0\nScholarship holder                                0\nAge at enrollment                                 0\nInternational                                     0\nCurricular units 1st sem (credited)               0\nCurricular units 1st sem (enrolled)               0\nCurricular units 1st sem (evaluations)            0\nCurricular units 1st sem (approved)               0\nCurricular units 1st sem (grade)                  0\nCurricular units 1st sem (without evaluations)    0\nCurricular units 2nd sem (credited)               0\nCurricular units 2nd sem (enrolled)               0\nCurricular units 2nd sem (evaluations)            0\nCurricular units 2nd sem (approved)               0\nCurricular units 2nd sem (grade)                  0\nCurricular units 2nd sem (without evaluations)    0\nUnemployment rate                                 0\nInflation rate                                    0\nGDP                                               0\nTarget                                            0\ndtype: int64\n\n\n\n\n\nBecause we want to research on if a student either drop out or graduate, there is no need to include “enrolled” student.\n\ndf = df[df['Target'] != 'Enrolled']\nprint(df['Target'].unique())\ntarget_mapping = {\"Dropout\": 0, \"Graduate\": 1}\ndf['Target_encoded'] = df['Target'].map(target_mapping)\n\n['Dropout' 'Graduate']\n\n\n\n\n\nIn this instance, our aim is to exclude students who exhibit atypical enrollment ages, as they are not representative of the overall student population.\n\n# cut off outliers that have a unusual age\nnumerical_cols = ['Age at enrollment',]\nfor col in numerical_cols:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n\n    #only keep rows in the dataframe that do not contain outliers\n    df = df[~((df[col] &lt; (Q1 - 1.5 * IQR)) | (df[col] &gt; (Q3 + 1.5 * IQR)))]\n\n#check the new min max\nprint(\"Min Age: \", df['Age at enrollment'].min())\nprint(\"Max Age: \", df['Age at enrollment'].max())\n\nMin Age:  17\nMax Age:  34\n\n\n\n\n\nIn this section, we aim to examine some traditionally considered factors influencing student outcomes. By visualizing these elements, we can empirically test our pre-existing assumptions about the key drivers of student success or failure.\n\n\nIt is traditionally believed that age plays a important role in shaping a student’s academic success. Older students are often perceived to have a greater life experience and motivation, which could translate into academic proficiency. However, they might also have more responsibilities, such as employment or family.\nOn the other hand, younger students, while potentially less experienced in life, might be more attuned to academic routines, which could foster their academic success.\nOur data visualization, however, unveils a more nuanced picture. It clearly suggests that students who enroll at a younger age have a notably higher probability of successfully graduating. This correlation between lower enrollment age and higher graduation rates is especially strong up to the age of 26.\nPost 26, we notice a smooth decrease in the rate of academic drop-off. This could potentially be attributed to increased stability in job and family commitments, allowing individuals to devote more time and effort towards their education.\n\nimport matplotlib.pyplot as plt\n\n#Histogram of Age at enrollment with Student Status\ndropout_age = df[df['Target'] == 'Dropout']['Age at enrollment']\ngraduate_age = df[df['Target'] == 'Graduate']['Age at enrollment']\nplt.hist([dropout_age, graduate_age], label=['Dropout', 'Graduate'])\nplt.xlabel('Age at Enrollment')\nplt.ylabel('Count')\nplt.title('Age at Enrollment Distribution by Student Status')\nplt.legend()\nplt.show()\n\n\n#create bins for ages\nbins = range(df['Age at enrollment'].min(), df['Age at enrollment'].max()+1,1)\n# create a DataFrame for dropouts\ndropout_df = df[df['Target'] == 'Dropout']['Age at enrollment'].value_counts(bins=bins, sort=False).rename('Dropout')\ndropout_df /= df['Age at enrollment'].value_counts(bins=bins, sort=False)\ndropout_df *= 100\n# percentage\n\n#graduates\ngraduate_df = df[df['Target'] == 'Graduate']['Age at enrollment'].value_counts(bins=bins, sort=False).rename('Graduate')\ngraduate_df /= df['Age at enrollment'].value_counts(bins=bins, sort=False)\ngraduate_df *= 100\n\n# combine them into a single DataFrame\npercentage_df = pd.concat([dropout_df, graduate_df], axis=1)\n\n#create a bar plot\npercentage_df.plot(kind='bar', stacked=True)\nplt.xlabel('Age at Enrollment')\nplt.ylabel('Percentage (%)')\nplt.title('Percentage of Dropout and Graduate Students by Age at Enrollment')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s commonly accepted that early academic performance, as indicated by first semester grades, significantly influences a student’s likelihood of successful graduation. This idea suggests that a strong start can create a strong foundation for success in studies.\nThe box plot visualization affirms this assumption, indicating that higher first semester grades significantly boost the likelihood of successful graduation. This highlights the importance of supporting students early in their academic journey, aiding those who may struggle initially, thereby enhancing their overall chances of successful graduation.\n\n#Boxplot of 'Curricular units 1st sem (grade)' divided by Student Status\ndropout_grade = df[df['Target']=='Dropout']['Curricular units 1st sem (grade)']\ngraduate_grade = df[df['Target']=='Graduate']['Curricular units 1st sem (grade)']\nplt.boxplot([dropout_grade, graduate_grade], labels=['Dropout', 'Graduate'])\nplt.title('First Semester Grade Distribution by Student Status')\nplt.ylabel('First Semester Grade')\nplt.show()\n\n\n\n\n\n\n\nThere’s a prevalent belief that the timing of classes can affect a student’s academic success. This belief suggests that daytime students, being potentially have a greater efficiency in learning.\nThe pie chart visualization confirms this assumption, showing that students attending daytime classes indeed have a significantly higher probability of successful graduation. This underscores the importance of time scheduling in the academic success of students and warrants further investigation into the specific biological and psychological factors that contribute to this phenomenon.\n\ndf_copy=df.copy()\ndaytime_counts = df_copy[df_copy['Daytime/evening attendance'] == 1]['Target'].value_counts()\nevening_counts = df_copy[df_copy['Daytime/evening attendance'] == 0]['Target'].value_counts()\n\n#pie chart for Daytime students\nplt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nplt.pie(daytime_counts, labels = daytime_counts.index, autopct='%1.1f%%', startangle=140)\nplt.axis('equal') \nplt.title('Daytime Students')\n\n#pie chart for Evening students\nplt.subplot(1,2,2)\nplt.pie(evening_counts, labels = evening_counts.index, autopct='%1.1f%%', startangle=140)\nplt.axis('equal') \nplt.title('Evening Students')\n\nplt.suptitle('Distribution of Dropout and Graduate Students by Attendance Time')\nplt.show()\n\n\n\n\n\n\n\nThere’s a common thought that a student’s marital status might change their success in school. Single students might have more time for studying since they don’t have a spouse or family responsibilities.\nOur data shows an interesting trend. The first chart shows that single students graduate more often. But when we look at the second chart, we see that there are a lot more single students than married ones in our data, which means our dataset is imbalanced. This imbalance suggests that we can’t draw a concrete conclusion about the impact of marital status on graduation rates as the data might be skewed.\n\n#map the marital status\ndef map_marital_status(status):\n    if status == 1:\n        return 'Single'\n    elif status == 2:\n        return 'Married'\n    elif status == 3:\n        return 'Widower'\n    elif status == 4:\n        return 'Divorced'\n    elif status == 5:\n        return 'Facto Union'\n    elif status == 6:\n        return 'Legally Separated'\n    else:\n        return 'Other'\n\n#make groups\ndf_copy['Marital status'] = df_copy['Marital status'].apply(map_marital_status)\ngrouped_df_marital = df_copy.groupby(['Marital status', 'Target']).size().unstack()\ngrouped_df_marital = grouped_df_marital.div(grouped_df_marital.sum(axis=1), axis=0)*100\n\n\n\n#create a bar plot\ngrouped_df_marital.plot(kind='bar', stacked=True)\nplt.title('Student Status by Marital Status')\nplt.xlabel('Marital status')\nplt.ylabel('Percentage (%)')\nplt.legend(title='Student Status')\nplt.show()\n\n#first let's visualize the number of people of each marital status\ndf_copy['Marital status'].value_counts().plot(kind='bar')\nplt.title('Population Distribution by Marital Status')\nplt.xlabel('Marital Status')\nplt.ylabel('Count')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nHaving examined some conventionally acknowledged predictors of student outcomes, we will now visualize all the variables in our dataset. Our goal is to evaluate the correlation between each variable and the student status. This comprehensive correlation assessment will help us identify the most significant determinants of a student’s academic trajectory.\n\n\nCertain columns in our dataset represent unordered categorical variables. For instance, the fourth visualization in the previous section demonstrates an unordered category that lacks any logical order or hierarchy. In order to enhance the meaningfulness of our correlation visualization, we need to focus on columns that contain ordered categories or numerical values. Therefore, we will process our dataset to retain only these relevant columns.\n\ndf_copy = df.copy()\n#columns to drop from exploring of dataset\ncolumns_to_drop = ['Marital status', 'Application mode', 'Application order', 'Course', 'Daytime/evening attendance', \n                   'Previous qualification', 'Nacionality', \"Mother's qualification\", \"Father's qualification\", \n                   \"Mother's occupation\", \"Father's occupation\"]\ndf_copy = df_copy.drop(columns=columns_to_drop)\n\n\n\n\nUsing Plotly, we can make a visually appealing and informative visualization. It provides ample space for displaying the precise values of the correlation coefficients, as users can hover over each bar to examine the values in detail.\n\n# This works in CKHUB, but may due to some reason not work in the webpage (compatibility of plotly lib in binder)\n# corr = df_copy.corr()\n# import plotly.graph_objects as go\n\n# #create a bar chart\n# corr_target = corr['Target_encoded'].sort_values()\n# fig = go.Figure(data=go.Bar(x=corr_target.index, y=corr_target.values))\n# fig.update_layout(title_text='Correlation of Variables with Target', \n#                   xaxis_title='Variables', \n#                   yaxis_title='Correlation coefficient',\n#                   autosize=False,\n#                   width=800,\n#                   height=800,\n#                   margin=dict(l=50, r=50, b=100, t=100, pad=4))\n# fig.show()\n\n#Therefore, here is the seaborn version\nimport seaborn as sns\ncorr_target = df_copy.corr()['Target_encoded'].sort_values()\nplt.figure(figsize=(10, 8)) # you can adjust the size as needed\nsns.barplot(x=corr_target.values, y=corr_target.index)\nplt.xlabel('Correlation coefficient')\nplt.ylabel('Variables')\nplt.title('Correlation of Variables with Target')\n\nplt.show()\n\n\n/tmp/ipykernel_1044/3793878396.py:2: FutureWarning:\n\nThe default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n/tmp/ipykernel_1044/3793878396.py:19: FutureWarning:\n\nThe default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n\n\n\n                                                \n\n\n\n\n\n\n\n\nWe use the following standard cutoffs to categorize the strength of correlations: a strong correlation is indicated by a value greater than 0.5, a medium correlation falls between 0.25 and 0.5, and a weak correlation is represented by a value less than 0.25.\nBased on these criteria, we observe a number of correlations that align with traditionally held beliefs. For instance, the medium negative correlation between ‘Age at enrollment’ and the target (-0.3104668) suggests that older students may be more likely to drop out. This supports our earlier assumptions and aligns with our previous data visualization.\nFor positive correlations, there is are strong correlations between ‘Curricular units (approved/graded)’ for both semesters and student status. The stronger values (0.5538, 0.5963, 0.6484) indicate a higher likelihood of graduation for students with more credited units or higher grades. Furthermore, the medium positive correlation (0.3053657) for ‘Scholarship holders’ suggests these students, often exhibiting superior academic performance, are more likely to graduate.\nIn addition to these familiar correlations, our analysis uncovers some newer factors tied to student dropout rates. - ‘Debtor’ demonstrates a medium negative correlation (-0.26465921) with the target, hinting at a higher dropout likelihood for students in debt. Conversely, - ‘Tuition fees up to date’ shows a medium positive correlation (0.43003638), suggesting students maintaining current tuition payments are more likely to graduate. - ‘Gender’ has a negative medium strength correlation (-0.24559089), implying that male students may be more likely to drop out than famale students\nWhile these interpretations are very meaningful, it’s important to emphasize that correlation does not mean causation. Thorough investigation is required to fully comprehend these relationships and identify the root causes. For instance, the higher dropout rates among older students or those in debt could be attributed to financial constraints, familial obligations, and a bunch of other factors.\nOne interesting finding is that, as an international student, I also don’t find a significant correlation between a student being international and the dropout rate.\n\n\n\n\nUpon visualizing the correlation heatmap, we find no substantial linkage between social and economic factors (Unemployment rate, GDP, Inflation rate) and the various academic attributes of students.\nTo gain a more complete understanding, we’d need to examine trends over a more extended period and possibly incorporate other data such as government education spending, socio-economic status of students’ families, and broader societal factors.\nHence, while our current analysis does not indicate a substantial linkage, we cannot completely rule out the potential influences of social and economic conditions on student academic performance. Further research using a more comprehensive dataset covering longer time frames is recommended to explore these potential impacts more thoroughly.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = df_copy.corr()\n\nf, ax = plt.subplots(figsize=(11, 9))\n#create a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, cmap=cmap, center=0)\nplt.show()\n\n/tmp/ipykernel_1044/48788898.py:4: FutureWarning:\n\nThe default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n\n\n\n\n\n\n\n\nIn our quest to understand student academic outcomes, we’re not just looking at individual factors but the intricate web of interactions among them. Moreover, exploring correlations among variables could help us to identify potential colinearity of two or more independent variables in a regression model are highly correlated.\nWe will employ the correlation heatmap displayed above to detect potential multicollinearity among the independent variables.\n\n\nThe negative correlation of -0.323 between ‘Displaced’ and ‘Age at enrollment’ indicates a moderate, inverse relationship: younger students are more likely to be displaced, while older students are less so. This may be due to factors like economic instability or housing insecurity among younger students, or potentially greater stability or preparedness among older students returning to education.\nHowever, without further research, it’s uncertain if this correlation implies a causal link or simply reflects underlying variables. Understanding such relationships can help shape effective institutional support, especially for vulnerable, younger students. The ripple effect of these findings might also extend to areas like mental health, highlighting the need for better approaches.\n\ncorrelation = df['Displaced'].corr(df['Age at enrollment'])\n\nprint(f\"The correlation between 'Displaced' and 'Age at enrollment' is: {correlation}\")\n\nThe correlation between 'Displaced' and 'Age at enrollment' is: -0.3237735997464465\n\n\n\n\n\nThe negative correlation of -0.431 between ‘Debtor’ and ‘Tuition fees up to date’ indicates a moderately strong inverse relationship. Essentially, if a student is a debtor, it’s less likely their tuition fees are up to date, and vice versa. This makes intuitive sense, as being a debtor often implies facing financial hardships, which could hinder timely tuition payments. The presence of such colinearity indicates that these factors may not operate independently, but instead might exert a mutual influence.\n\ncorrelation = df['Debtor'].corr(df['Tuition fees up to date'])\n\nprint(f\"The correlation between 'Debtor' and 'Tuition fees up to date' is: {correlation}\")\n\nThe correlation between 'Debtor' and 'Tuition fees up to date' is: -0.43166077929905516\n\n\n\n\n\n\nOur analysis has yielded valuable insights into the various factors that can significantly impact student academic success. We explored several common assumptions and found that some were supported by empirical evidence.\nAdditionally, through a comprehensive assessment of dataset, we uncovered new factors that influence student outcome. Interestingly, some findings confirmed our initial assumptions, such as the negative correlation between the age at enrollment and student graduation, as well as the positive correlation between credited units and student success.\nWe also observed the importance of financial factors, such as student debt and timely tuition fee payments, in relation to student outcomes. However, it is essential to note that correlations do not imply causation, and further research is necessary to thoroughly understand these relationships.\nRegarding societal and economic indicators like GDP and unemployment rates, we did not find substantial correlations with student academic success. Nonetheless, it is important to consider that these factors may still have potential influences that requires more comprehensive research with larger datasets and longer timeframes.\nAdditionally, our analysis of potential multicollinearity among variables revealed intriguing correlations. For instance, the inverse relationship between ‘Displaced’ and ‘Age at enrollment’, and the negative correlation between ‘Debtor’ and ‘Tuition fees up to date’, suggests possible mutual influences.\nIn conclusion, our analysis demonstrates the complexity of predicting student academic outcome. A multitude of factors, including personal circumstances, academic performance, financial situation, and potentially broader societal factors, all interact in intricate ways to influence student academic success."
  },
  {
    "objectID": "posts/final.html#install-required-packages",
    "href": "posts/final.html#install-required-packages",
    "title": "Student Dropout",
    "section": "",
    "text": "# # install packages\n!pip install kaggle\n!pip install pandas\n!pip install matplotlib\n!pip install seaborn\n!pip install plotly"
  },
  {
    "objectID": "posts/final.html#import-data-and-summary-statistics",
    "href": "posts/final.html#import-data-and-summary-statistics",
    "title": "Student Dropout",
    "section": "",
    "text": "import zipfile\nimport pandas as pd\nfrom kaggle.api.kaggle_api_extended import KaggleApi\n\n# Initialize the API\napi = KaggleApi()\napi.authenticate()\n\n#download dataset\napi.dataset_download_files('naveenkumar20bps1137/predict-students-dropout-and-academic-success')\nwith zipfile.ZipFile('predict-students-dropout-and-academic-success.zip', 'r') as zip_ref:\n    zip_ref.extractall()\n\n#load dataset into a pandas DataFrame\ndf = pd.read_csv('dataset.csv')"
  },
  {
    "objectID": "posts/final.html#cleanprocess-the-data-drop-null-value",
    "href": "posts/final.html#cleanprocess-the-data-drop-null-value",
    "title": "Student Dropout",
    "section": "",
    "text": "We can see that the Target column has not been encoded yet. Then, we want to check if there is any null/missing value.\nGood news! we do not have any null value.\n\n#check if there are null/missing values\nis_null = df.isnull().sum()\nprint(is_null)\n\nMarital status                                    0\nApplication mode                                  0\nApplication order                                 0\nCourse                                            0\nDaytime/evening attendance                        0\nPrevious qualification                            0\nNacionality                                       0\nMother's qualification                            0\nFather's qualification                            0\nMother's occupation                               0\nFather's occupation                               0\nDisplaced                                         0\nEducational special needs                         0\nDebtor                                            0\nTuition fees up to date                           0\nGender                                            0\nScholarship holder                                0\nAge at enrollment                                 0\nInternational                                     0\nCurricular units 1st sem (credited)               0\nCurricular units 1st sem (enrolled)               0\nCurricular units 1st sem (evaluations)            0\nCurricular units 1st sem (approved)               0\nCurricular units 1st sem (grade)                  0\nCurricular units 1st sem (without evaluations)    0\nCurricular units 2nd sem (credited)               0\nCurricular units 2nd sem (enrolled)               0\nCurricular units 2nd sem (evaluations)            0\nCurricular units 2nd sem (approved)               0\nCurricular units 2nd sem (grade)                  0\nCurricular units 2nd sem (without evaluations)    0\nUnemployment rate                                 0\nInflation rate                                    0\nGDP                                               0\nTarget                                            0\ndtype: int64"
  },
  {
    "objectID": "posts/final.html#cleanprocess-the-data-remove-unrelated-values",
    "href": "posts/final.html#cleanprocess-the-data-remove-unrelated-values",
    "title": "Student Dropout",
    "section": "",
    "text": "Because we want to research on if a student either drop out or graduate, there is no need to include “enrolled” student.\n\ndf = df[df['Target'] != 'Enrolled']\nprint(df['Target'].unique())\ntarget_mapping = {\"Dropout\": 0, \"Graduate\": 1}\ndf['Target_encoded'] = df['Target'].map(target_mapping)\n\n['Dropout' 'Graduate']"
  },
  {
    "objectID": "posts/final.html#cleanprocess-the-data-remove-outliers",
    "href": "posts/final.html#cleanprocess-the-data-remove-outliers",
    "title": "Student Dropout",
    "section": "",
    "text": "In this instance, our aim is to exclude students who exhibit atypical enrollment ages, as they are not representative of the overall student population.\n\n# cut off outliers that have a unusual age\nnumerical_cols = ['Age at enrollment',]\nfor col in numerical_cols:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n\n    #only keep rows in the dataframe that do not contain outliers\n    df = df[~((df[col] &lt; (Q1 - 1.5 * IQR)) | (df[col] &gt; (Q3 + 1.5 * IQR)))]\n\n#check the new min max\nprint(\"Min Age: \", df['Age at enrollment'].min())\nprint(\"Max Age: \", df['Age at enrollment'].max())\n\nMin Age:  17\nMax Age:  34"
  },
  {
    "objectID": "posts/final.html#answer-to-q1-investigating-traditionally-believed-predictors",
    "href": "posts/final.html#answer-to-q1-investigating-traditionally-believed-predictors",
    "title": "Student Dropout",
    "section": "",
    "text": "In this section, we aim to examine some traditionally considered factors influencing student outcomes. By visualizing these elements, we can empirically test our pre-existing assumptions about the key drivers of student success or failure.\n\n\nIt is traditionally believed that age plays a important role in shaping a student’s academic success. Older students are often perceived to have a greater life experience and motivation, which could translate into academic proficiency. However, they might also have more responsibilities, such as employment or family.\nOn the other hand, younger students, while potentially less experienced in life, might be more attuned to academic routines, which could foster their academic success.\nOur data visualization, however, unveils a more nuanced picture. It clearly suggests that students who enroll at a younger age have a notably higher probability of successfully graduating. This correlation between lower enrollment age and higher graduation rates is especially strong up to the age of 26.\nPost 26, we notice a smooth decrease in the rate of academic drop-off. This could potentially be attributed to increased stability in job and family commitments, allowing individuals to devote more time and effort towards their education.\n\nimport matplotlib.pyplot as plt\n\n#Histogram of Age at enrollment with Student Status\ndropout_age = df[df['Target'] == 'Dropout']['Age at enrollment']\ngraduate_age = df[df['Target'] == 'Graduate']['Age at enrollment']\nplt.hist([dropout_age, graduate_age], label=['Dropout', 'Graduate'])\nplt.xlabel('Age at Enrollment')\nplt.ylabel('Count')\nplt.title('Age at Enrollment Distribution by Student Status')\nplt.legend()\nplt.show()\n\n\n#create bins for ages\nbins = range(df['Age at enrollment'].min(), df['Age at enrollment'].max()+1,1)\n# create a DataFrame for dropouts\ndropout_df = df[df['Target'] == 'Dropout']['Age at enrollment'].value_counts(bins=bins, sort=False).rename('Dropout')\ndropout_df /= df['Age at enrollment'].value_counts(bins=bins, sort=False)\ndropout_df *= 100\n# percentage\n\n#graduates\ngraduate_df = df[df['Target'] == 'Graduate']['Age at enrollment'].value_counts(bins=bins, sort=False).rename('Graduate')\ngraduate_df /= df['Age at enrollment'].value_counts(bins=bins, sort=False)\ngraduate_df *= 100\n\n# combine them into a single DataFrame\npercentage_df = pd.concat([dropout_df, graduate_df], axis=1)\n\n#create a bar plot\npercentage_df.plot(kind='bar', stacked=True)\nplt.xlabel('Age at Enrollment')\nplt.ylabel('Percentage (%)')\nplt.title('Percentage of Dropout and Graduate Students by Age at Enrollment')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s commonly accepted that early academic performance, as indicated by first semester grades, significantly influences a student’s likelihood of successful graduation. This idea suggests that a strong start can create a strong foundation for success in studies.\nThe box plot visualization affirms this assumption, indicating that higher first semester grades significantly boost the likelihood of successful graduation. This highlights the importance of supporting students early in their academic journey, aiding those who may struggle initially, thereby enhancing their overall chances of successful graduation.\n\n#Boxplot of 'Curricular units 1st sem (grade)' divided by Student Status\ndropout_grade = df[df['Target']=='Dropout']['Curricular units 1st sem (grade)']\ngraduate_grade = df[df['Target']=='Graduate']['Curricular units 1st sem (grade)']\nplt.boxplot([dropout_grade, graduate_grade], labels=['Dropout', 'Graduate'])\nplt.title('First Semester Grade Distribution by Student Status')\nplt.ylabel('First Semester Grade')\nplt.show()\n\n\n\n\n\n\n\nThere’s a prevalent belief that the timing of classes can affect a student’s academic success. This belief suggests that daytime students, being potentially have a greater efficiency in learning.\nThe pie chart visualization confirms this assumption, showing that students attending daytime classes indeed have a significantly higher probability of successful graduation. This underscores the importance of time scheduling in the academic success of students and warrants further investigation into the specific biological and psychological factors that contribute to this phenomenon.\n\ndf_copy=df.copy()\ndaytime_counts = df_copy[df_copy['Daytime/evening attendance'] == 1]['Target'].value_counts()\nevening_counts = df_copy[df_copy['Daytime/evening attendance'] == 0]['Target'].value_counts()\n\n#pie chart for Daytime students\nplt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nplt.pie(daytime_counts, labels = daytime_counts.index, autopct='%1.1f%%', startangle=140)\nplt.axis('equal') \nplt.title('Daytime Students')\n\n#pie chart for Evening students\nplt.subplot(1,2,2)\nplt.pie(evening_counts, labels = evening_counts.index, autopct='%1.1f%%', startangle=140)\nplt.axis('equal') \nplt.title('Evening Students')\n\nplt.suptitle('Distribution of Dropout and Graduate Students by Attendance Time')\nplt.show()\n\n\n\n\n\n\n\nThere’s a common thought that a student’s marital status might change their success in school. Single students might have more time for studying since they don’t have a spouse or family responsibilities.\nOur data shows an interesting trend. The first chart shows that single students graduate more often. But when we look at the second chart, we see that there are a lot more single students than married ones in our data, which means our dataset is imbalanced. This imbalance suggests that we can’t draw a concrete conclusion about the impact of marital status on graduation rates as the data might be skewed.\n\n#map the marital status\ndef map_marital_status(status):\n    if status == 1:\n        return 'Single'\n    elif status == 2:\n        return 'Married'\n    elif status == 3:\n        return 'Widower'\n    elif status == 4:\n        return 'Divorced'\n    elif status == 5:\n        return 'Facto Union'\n    elif status == 6:\n        return 'Legally Separated'\n    else:\n        return 'Other'\n\n#make groups\ndf_copy['Marital status'] = df_copy['Marital status'].apply(map_marital_status)\ngrouped_df_marital = df_copy.groupby(['Marital status', 'Target']).size().unstack()\ngrouped_df_marital = grouped_df_marital.div(grouped_df_marital.sum(axis=1), axis=0)*100\n\n\n\n#create a bar plot\ngrouped_df_marital.plot(kind='bar', stacked=True)\nplt.title('Student Status by Marital Status')\nplt.xlabel('Marital status')\nplt.ylabel('Percentage (%)')\nplt.legend(title='Student Status')\nplt.show()\n\n#first let's visualize the number of people of each marital status\ndf_copy['Marital status'].value_counts().plot(kind='bar')\nplt.title('Population Distribution by Marital Status')\nplt.xlabel('Marital Status')\nplt.ylabel('Count')\nplt.show()"
  },
  {
    "objectID": "posts/final.html#answer-to-q2-assessing-correlations-between-target-and-other-variables",
    "href": "posts/final.html#answer-to-q2-assessing-correlations-between-target-and-other-variables",
    "title": "Student Dropout",
    "section": "",
    "text": "Having examined some conventionally acknowledged predictors of student outcomes, we will now visualize all the variables in our dataset. Our goal is to evaluate the correlation between each variable and the student status. This comprehensive correlation assessment will help us identify the most significant determinants of a student’s academic trajectory.\n\n\nCertain columns in our dataset represent unordered categorical variables. For instance, the fourth visualization in the previous section demonstrates an unordered category that lacks any logical order or hierarchy. In order to enhance the meaningfulness of our correlation visualization, we need to focus on columns that contain ordered categories or numerical values. Therefore, we will process our dataset to retain only these relevant columns.\n\ndf_copy = df.copy()\n#columns to drop from exploring of dataset\ncolumns_to_drop = ['Marital status', 'Application mode', 'Application order', 'Course', 'Daytime/evening attendance', \n                   'Previous qualification', 'Nacionality', \"Mother's qualification\", \"Father's qualification\", \n                   \"Mother's occupation\", \"Father's occupation\"]\ndf_copy = df_copy.drop(columns=columns_to_drop)\n\n\n\n\nUsing Plotly, we can make a visually appealing and informative visualization. It provides ample space for displaying the precise values of the correlation coefficients, as users can hover over each bar to examine the values in detail.\n\n# This works in CKHUB, but may due to some reason not work in the webpage (compatibility of plotly lib in binder)\n# corr = df_copy.corr()\n# import plotly.graph_objects as go\n\n# #create a bar chart\n# corr_target = corr['Target_encoded'].sort_values()\n# fig = go.Figure(data=go.Bar(x=corr_target.index, y=corr_target.values))\n# fig.update_layout(title_text='Correlation of Variables with Target', \n#                   xaxis_title='Variables', \n#                   yaxis_title='Correlation coefficient',\n#                   autosize=False,\n#                   width=800,\n#                   height=800,\n#                   margin=dict(l=50, r=50, b=100, t=100, pad=4))\n# fig.show()\n\n#Therefore, here is the seaborn version\nimport seaborn as sns\ncorr_target = df_copy.corr()['Target_encoded'].sort_values()\nplt.figure(figsize=(10, 8)) # you can adjust the size as needed\nsns.barplot(x=corr_target.values, y=corr_target.index)\nplt.xlabel('Correlation coefficient')\nplt.ylabel('Variables')\nplt.title('Correlation of Variables with Target')\n\nplt.show()\n\n\n/tmp/ipykernel_1044/3793878396.py:2: FutureWarning:\n\nThe default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n/tmp/ipykernel_1044/3793878396.py:19: FutureWarning:\n\nThe default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n\n\n\n                                                \n\n\n\n\n\n\n\n\nWe use the following standard cutoffs to categorize the strength of correlations: a strong correlation is indicated by a value greater than 0.5, a medium correlation falls between 0.25 and 0.5, and a weak correlation is represented by a value less than 0.25.\nBased on these criteria, we observe a number of correlations that align with traditionally held beliefs. For instance, the medium negative correlation between ‘Age at enrollment’ and the target (-0.3104668) suggests that older students may be more likely to drop out. This supports our earlier assumptions and aligns with our previous data visualization.\nFor positive correlations, there is are strong correlations between ‘Curricular units (approved/graded)’ for both semesters and student status. The stronger values (0.5538, 0.5963, 0.6484) indicate a higher likelihood of graduation for students with more credited units or higher grades. Furthermore, the medium positive correlation (0.3053657) for ‘Scholarship holders’ suggests these students, often exhibiting superior academic performance, are more likely to graduate.\nIn addition to these familiar correlations, our analysis uncovers some newer factors tied to student dropout rates. - ‘Debtor’ demonstrates a medium negative correlation (-0.26465921) with the target, hinting at a higher dropout likelihood for students in debt. Conversely, - ‘Tuition fees up to date’ shows a medium positive correlation (0.43003638), suggesting students maintaining current tuition payments are more likely to graduate. - ‘Gender’ has a negative medium strength correlation (-0.24559089), implying that male students may be more likely to drop out than famale students\nWhile these interpretations are very meaningful, it’s important to emphasize that correlation does not mean causation. Thorough investigation is required to fully comprehend these relationships and identify the root causes. For instance, the higher dropout rates among older students or those in debt could be attributed to financial constraints, familial obligations, and a bunch of other factors.\nOne interesting finding is that, as an international student, I also don’t find a significant correlation between a student being international and the dropout rate."
  },
  {
    "objectID": "posts/final.html#answer-to-q3-impacts-of-social-and-economic-indicators-like-gdp-and-inflation-rate",
    "href": "posts/final.html#answer-to-q3-impacts-of-social-and-economic-indicators-like-gdp-and-inflation-rate",
    "title": "Student Dropout",
    "section": "",
    "text": "Upon visualizing the correlation heatmap, we find no substantial linkage between social and economic factors (Unemployment rate, GDP, Inflation rate) and the various academic attributes of students.\nTo gain a more complete understanding, we’d need to examine trends over a more extended period and possibly incorporate other data such as government education spending, socio-economic status of students’ families, and broader societal factors.\nHence, while our current analysis does not indicate a substantial linkage, we cannot completely rule out the potential influences of social and economic conditions on student academic performance. Further research using a more comprehensive dataset covering longer time frames is recommended to explore these potential impacts more thoroughly.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = df_copy.corr()\n\nf, ax = plt.subplots(figsize=(11, 9))\n#create a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, cmap=cmap, center=0)\nplt.show()\n\n/tmp/ipykernel_1044/48788898.py:4: FutureWarning:\n\nThe default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning."
  },
  {
    "objectID": "posts/final.html#answer-to-q4-discover-multicollinearity-of-independent-variables",
    "href": "posts/final.html#answer-to-q4-discover-multicollinearity-of-independent-variables",
    "title": "Student Dropout",
    "section": "",
    "text": "In our quest to understand student academic outcomes, we’re not just looking at individual factors but the intricate web of interactions among them. Moreover, exploring correlations among variables could help us to identify potential colinearity of two or more independent variables in a regression model are highly correlated.\nWe will employ the correlation heatmap displayed above to detect potential multicollinearity among the independent variables.\n\n\nThe negative correlation of -0.323 between ‘Displaced’ and ‘Age at enrollment’ indicates a moderate, inverse relationship: younger students are more likely to be displaced, while older students are less so. This may be due to factors like economic instability or housing insecurity among younger students, or potentially greater stability or preparedness among older students returning to education.\nHowever, without further research, it’s uncertain if this correlation implies a causal link or simply reflects underlying variables. Understanding such relationships can help shape effective institutional support, especially for vulnerable, younger students. The ripple effect of these findings might also extend to areas like mental health, highlighting the need for better approaches.\n\ncorrelation = df['Displaced'].corr(df['Age at enrollment'])\n\nprint(f\"The correlation between 'Displaced' and 'Age at enrollment' is: {correlation}\")\n\nThe correlation between 'Displaced' and 'Age at enrollment' is: -0.3237735997464465\n\n\n\n\n\nThe negative correlation of -0.431 between ‘Debtor’ and ‘Tuition fees up to date’ indicates a moderately strong inverse relationship. Essentially, if a student is a debtor, it’s less likely their tuition fees are up to date, and vice versa. This makes intuitive sense, as being a debtor often implies facing financial hardships, which could hinder timely tuition payments. The presence of such colinearity indicates that these factors may not operate independently, but instead might exert a mutual influence.\n\ncorrelation = df['Debtor'].corr(df['Tuition fees up to date'])\n\nprint(f\"The correlation between 'Debtor' and 'Tuition fees up to date' is: {correlation}\")\n\nThe correlation between 'Debtor' and 'Tuition fees up to date' is: -0.43166077929905516"
  },
  {
    "objectID": "posts/final.html#discussion",
    "href": "posts/final.html#discussion",
    "title": "Student Dropout",
    "section": "",
    "text": "Our analysis has yielded valuable insights into the various factors that can significantly impact student academic success. We explored several common assumptions and found that some were supported by empirical evidence.\nAdditionally, through a comprehensive assessment of dataset, we uncovered new factors that influence student outcome. Interestingly, some findings confirmed our initial assumptions, such as the negative correlation between the age at enrollment and student graduation, as well as the positive correlation between credited units and student success.\nWe also observed the importance of financial factors, such as student debt and timely tuition fee payments, in relation to student outcomes. However, it is essential to note that correlations do not imply causation, and further research is necessary to thoroughly understand these relationships.\nRegarding societal and economic indicators like GDP and unemployment rates, we did not find substantial correlations with student academic success. Nonetheless, it is important to consider that these factors may still have potential influences that requires more comprehensive research with larger datasets and longer timeframes.\nAdditionally, our analysis of potential multicollinearity among variables revealed intriguing correlations. For instance, the inverse relationship between ‘Displaced’ and ‘Age at enrollment’, and the negative correlation between ‘Debtor’ and ‘Tuition fees up to date’, suggests possible mutual influences.\nIn conclusion, our analysis demonstrates the complexity of predicting student academic outcome. A multitude of factors, including personal circumstances, academic performance, financial situation, and potentially broader societal factors, all interact in intricate ways to influence student academic success."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]